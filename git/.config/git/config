[user]
	name = Arialdo Martini
	email = arialdo.martini@gmail.com

[core]
	autocrlf = false
	editor = emacs
	excludesfile = ~/.config/git/.gitignore-global
	pager = delta

[status]
	showUntrackedFiles = all

[delta]
    navigate = true # use n and N to move between diff sections
    light = false
	side-by-side = true

[diff]
	MnemonicPrefix = true
	#external = difft
	guitool = kdiff3

#[format]
#	pretty = oneline

[color]
	ui = true

[alias]
	go = checkout

	c = "!f() { git commit -am \"$1\"; }; f"

	# List all the branches
	branches = branch -a

	# Show an ascii tree of the current branch
	tr = log --graph --pretty=format:'%C(yellow)%d%Creset %s %C(cyan)<%an>%Creset %Cgreen(%cd) %Cred%h%Creset' --abbrev-commit --date=relative

	# Show an ascii tree of all branches
	tra = log --graph --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s %C(cyan)<%an>%Creset %Cgreen(%cd)' --abbrev-commit --date=relative --all

	# Non-verbose status
	st = status --short --branch --untracked-files=all

	# List the last commits of each branch, sorted by date
	last-branches = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) [%(committername)]'
	lastb = for-each-ref --sort=-committerdate --format='%(committerdate:short) %(refname:short) [%(committername)]'

	# Smarter blame ignores white space (-w), moving text (-M) and  moving text into other files (-C)
	bl = blame -wMC

	# Undo
	undo = !git reset -- . && git checkout -- . && git status

	# Stand-up! Shows a list of what I worked on yesterday so I can be prepared for my stand-up meeting.
	standup = !git log --since yesterday  --author `git config user.email` --pretty=oneline

	# Prints a list of all ignored files
	ignored = ls-files --others -i --exclude-standard

	# List all available aliases
	aliases = config --get-regexp ^alias

	# Word diff
	diffw = diff --word-diff=plain

	# Running gitk in the background
	k = !gitk&
	kk = !gitk --all --simplify-by-decoration&
	ka = !gitk --all&

	# Rename a branch
	rename-current-branch = "!f() { current_branch=`git rev-parse --abbrev-ref HEAD` && git checkout --quiet -b $1 && git branch --quiet -d $current_branch; }; f "
	rename-branch = "!f() { git branch $2 $1 && git branch --quiet -d $1; }; f git"

	# amend the last commit, using the same commit message
	amend = commit --amend -C HEAD
	amends = !git add . && git amend

        # reset the current branch to the previous commit
        back = reset --hard HEAD~1

	# lists the files I'm about to commit
	this = diff --cached --name-only
	thisv = diff --cached --stat

	# show the list of the last committed files
	last = diff-tree --no-commit-id --name-only HEAD

        fetchpl = "!f() { git fetch $1 refs/pull/$2/head; }; f"
	getpl = "!f() { git fetch $1 +refs/pull/$2/head:refs/remotes/origin/pr/$2; }; f"

	# merge a branch like a pull request
	mergepr = merge --no-ff

	# fast-forward merge
	ff = merge --ff

        # fixup
	fixup = "!f() { TARGET=$(git rev-parse $1); git commit --fixup=$TARGET ${@:2} && GIT_SEQUENCE_EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"

[mergetool]
	keepBackup = true
[push]
	default = simple
[rebase]
	autosquash = true
[pull]
	rebase = true

[merge]
	tool = kdiff3

[difftool]
	prompt = false
[github]
	user = arialdomartini
[init]
	defaultBranch = main
